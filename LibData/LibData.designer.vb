'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:4.0.30319.1008
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict On
Option Explicit On

Imports System
Imports System.Collections.Generic
Imports System.ComponentModel
Imports System.Data
Imports System.Data.Linq
Imports System.Data.Linq.Mapping
Imports System.Linq
Imports System.Linq.Expressions
Imports System.Reflection


<Global.System.Data.Linq.Mapping.DatabaseAttribute(Name:="LibCRData")>  _
Partial Public Class LibDataDataContext
	Inherits System.Data.Linq.DataContext
	
	Private Shared mappingSource As System.Data.Linq.Mapping.MappingSource = New AttributeMappingSource()
	
  #Region "Extensibility Method Definitions"
  Partial Private Sub OnCreated()
  End Sub
  Partial Private Sub InsertLIB_TRANSACTION(instance As LIB_TRANSACTION)
    End Sub
  Partial Private Sub UpdateLIB_TRANSACTION(instance As LIB_TRANSACTION)
    End Sub
  Partial Private Sub DeleteLIB_TRANSACTION(instance As LIB_TRANSACTION)
    End Sub
  Partial Private Sub InsertLIB_PRICE_LIST(instance As LIB_PRICE_LIST)
    End Sub
  Partial Private Sub UpdateLIB_PRICE_LIST(instance As LIB_PRICE_LIST)
    End Sub
  Partial Private Sub DeleteLIB_PRICE_LIST(instance As LIB_PRICE_LIST)
    End Sub
  #End Region
	
	Public Sub New(ByVal connection As String)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As System.Data.IDbConnection)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As String, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As System.Data.IDbConnection, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public ReadOnly Property LIB_TRANSACTIONs() As System.Data.Linq.Table(Of LIB_TRANSACTION)
		Get
			Return Me.GetTable(Of LIB_TRANSACTION)
		End Get
	End Property
	
	Public ReadOnly Property DayTotals() As System.Data.Linq.Table(Of DayTotal)
		Get
			Return Me.GetTable(Of DayTotal)
		End Get
	End Property
	
	Public ReadOnly Property LIB_PRICE_LISTs() As System.Data.Linq.Table(Of LIB_PRICE_LIST)
		Get
			Return Me.GetTable(Of LIB_PRICE_LIST)
		End Get
	End Property
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.LIB_TRANSACTION")>  _
Partial Public Class LIB_TRANSACTION
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _LIBSalesID As Long
	
	Private _LIBLine As System.Nullable(Of Integer)
	
	Private _LIBPCode As String
	
	Private _LIBItems As System.Nullable(Of Integer)
	
	Private _LIBCash As Decimal
	
	Private _LIBChk As System.Nullable(Of Decimal)
	
	Private _LIBPDate As System.Nullable(Of Date)
	
	Private _LIBPTime As System.Nullable(Of System.TimeSpan)
	
	Private _ORAUpdate As System.Nullable(Of Boolean)
	
	Private _PType As String
	
	Private _LIBPLID As Long
	
	Private _LibLocation As String
	
	Private _EOD As System.Nullable(Of Boolean)
	
	Private _LIB_PRICE_LIST As EntityRef(Of LIB_PRICE_LIST)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnLIBSalesIDChanging(value As Long)
    End Sub
    Partial Private Sub OnLIBSalesIDChanged()
    End Sub
    Partial Private Sub OnLIBLineChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnLIBLineChanged()
    End Sub
    Partial Private Sub OnLIBPCodeChanging(value As String)
    End Sub
    Partial Private Sub OnLIBPCodeChanged()
    End Sub
    Partial Private Sub OnLIBItemsChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnLIBItemsChanged()
    End Sub
    Partial Private Sub OnLIBCashChanging(value As Decimal)
    End Sub
    Partial Private Sub OnLIBCashChanged()
    End Sub
    Partial Private Sub OnLIBChkChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OnLIBChkChanged()
    End Sub
    Partial Private Sub OnLIBPDateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnLIBPDateChanged()
    End Sub
    Partial Private Sub OnLIBPTimeChanging(value As System.Nullable(Of System.TimeSpan))
    End Sub
    Partial Private Sub OnLIBPTimeChanged()
    End Sub
    Partial Private Sub OnORAUpdateChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnORAUpdateChanged()
    End Sub
    Partial Private Sub OnPTypeChanging(value As String)
    End Sub
    Partial Private Sub OnPTypeChanged()
    End Sub
    Partial Private Sub OnLIBPLIDChanging(value As Long)
    End Sub
    Partial Private Sub OnLIBPLIDChanged()
    End Sub
    Partial Private Sub OnLibLocationChanging(value As String)
    End Sub
    Partial Private Sub OnLibLocationChanged()
    End Sub
    Partial Private Sub OnEODChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnEODChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._LIB_PRICE_LIST = CType(Nothing, EntityRef(Of LIB_PRICE_LIST))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LIBSalesID", AutoSync:=AutoSync.OnInsert, DbType:="BigInt NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property LIBSalesID() As Long
		Get
			Return Me._LIBSalesID
		End Get
		Set
			If ((Me._LIBSalesID = value)  _
						= false) Then
				Me.OnLIBSalesIDChanging(value)
				Me.SendPropertyChanging
				Me._LIBSalesID = value
				Me.SendPropertyChanged("LIBSalesID")
				Me.OnLIBSalesIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LIBLine", DbType:="Int")>  _
	Public Property LIBLine() As System.Nullable(Of Integer)
		Get
			Return Me._LIBLine
		End Get
		Set
			If (Me._LIBLine.Equals(value) = false) Then
				Me.OnLIBLineChanging(value)
				Me.SendPropertyChanging
				Me._LIBLine = value
				Me.SendPropertyChanged("LIBLine")
				Me.OnLIBLineChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LIBPCode", DbType:="NVarChar(50)")>  _
	Public Property LIBPCode() As String
		Get
			Return Me._LIBPCode
		End Get
		Set
			If (String.Equals(Me._LIBPCode, value) = false) Then
				Me.OnLIBPCodeChanging(value)
				Me.SendPropertyChanging
				Me._LIBPCode = value
				Me.SendPropertyChanged("LIBPCode")
				Me.OnLIBPCodeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LIBItems", DbType:="Int")>  _
	Public Property LIBItems() As System.Nullable(Of Integer)
		Get
			Return Me._LIBItems
		End Get
		Set
			If (Me._LIBItems.Equals(value) = false) Then
				Me.OnLIBItemsChanging(value)
				Me.SendPropertyChanging
				Me._LIBItems = value
				Me.SendPropertyChanged("LIBItems")
				Me.OnLIBItemsChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LIBCash", DbType:="Money NOT NULL")>  _
	Public Property LIBCash() As Decimal
		Get
			Return Me._LIBCash
		End Get
		Set
			If ((Me._LIBCash = value)  _
						= false) Then
				Me.OnLIBCashChanging(value)
				Me.SendPropertyChanging
				Me._LIBCash = value
				Me.SendPropertyChanged("LIBCash")
				Me.OnLIBCashChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LIBChk", DbType:="Money")>  _
	Public Property LIBChk() As System.Nullable(Of Decimal)
		Get
			Return Me._LIBChk
		End Get
		Set
			If (Me._LIBChk.Equals(value) = false) Then
				Me.OnLIBChkChanging(value)
				Me.SendPropertyChanging
				Me._LIBChk = value
				Me.SendPropertyChanged("LIBChk")
				Me.OnLIBChkChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LIBPDate", DbType:="Date")>  _
	Public Property LIBPDate() As System.Nullable(Of Date)
		Get
			Return Me._LIBPDate
		End Get
		Set
			If (Me._LIBPDate.Equals(value) = false) Then
				Me.OnLIBPDateChanging(value)
				Me.SendPropertyChanging
				Me._LIBPDate = value
				Me.SendPropertyChanged("LIBPDate")
				Me.OnLIBPDateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LIBPTime", DbType:="Time")>  _
	Public Property LIBPTime() As System.Nullable(Of System.TimeSpan)
		Get
			Return Me._LIBPTime
		End Get
		Set
			If (Me._LIBPTime.Equals(value) = false) Then
				Me.OnLIBPTimeChanging(value)
				Me.SendPropertyChanging
				Me._LIBPTime = value
				Me.SendPropertyChanged("LIBPTime")
				Me.OnLIBPTimeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ORAUpdate", DbType:="Bit")>  _
	Public Property ORAUpdate() As System.Nullable(Of Boolean)
		Get
			Return Me._ORAUpdate
		End Get
		Set
			If (Me._ORAUpdate.Equals(value) = false) Then
				Me.OnORAUpdateChanging(value)
				Me.SendPropertyChanging
				Me._ORAUpdate = value
				Me.SendPropertyChanged("ORAUpdate")
				Me.OnORAUpdateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PType", DbType:="NVarChar(50)")>  _
	Public Property PType() As String
		Get
			Return Me._PType
		End Get
		Set
			If (String.Equals(Me._PType, value) = false) Then
				Me.OnPTypeChanging(value)
				Me.SendPropertyChanging
				Me._PType = value
				Me.SendPropertyChanged("PType")
				Me.OnPTypeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LIBPLID", DbType:="BigInt NOT NULL")>  _
	Public Property LIBPLID() As Long
		Get
			Return Me._LIBPLID
		End Get
		Set
			If ((Me._LIBPLID = value)  _
						= false) Then
				If Me._LIB_PRICE_LIST.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnLIBPLIDChanging(value)
				Me.SendPropertyChanging
				Me._LIBPLID = value
				Me.SendPropertyChanged("LIBPLID")
				Me.OnLIBPLIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LibLocation", DbType:="NVarChar(25)")>  _
	Public Property LibLocation() As String
		Get
			Return Me._LibLocation
		End Get
		Set
			If (String.Equals(Me._LibLocation, value) = false) Then
				Me.OnLibLocationChanging(value)
				Me.SendPropertyChanging
				Me._LibLocation = value
				Me.SendPropertyChanged("LibLocation")
				Me.OnLibLocationChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_EOD", DbType:="Bit")>  _
	Public Property EOD() As System.Nullable(Of Boolean)
		Get
			Return Me._EOD
		End Get
		Set
			If (Me._EOD.Equals(value) = false) Then
				Me.OnEODChanging(value)
				Me.SendPropertyChanging
				Me._EOD = value
				Me.SendPropertyChanged("EOD")
				Me.OnEODChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="LIB_PRICE_LIST_LIB_TRANSACTION", Storage:="_LIB_PRICE_LIST", ThisKey:="LIBPLID", OtherKey:="LIBPLID", IsForeignKey:=true)>  _
	Public Property LIB_PRICE_LIST() As LIB_PRICE_LIST
		Get
			Return Me._LIB_PRICE_LIST.Entity
		End Get
		Set
			Dim previousValue As LIB_PRICE_LIST = Me._LIB_PRICE_LIST.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._LIB_PRICE_LIST.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._LIB_PRICE_LIST.Entity = Nothing
					previousValue.LIB_TRANSACTIONs.Remove(Me)
				End If
				Me._LIB_PRICE_LIST.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.LIB_TRANSACTIONs.Add(Me)
					Me._LIBPLID = value.LIBPLID
				Else
					Me._LIBPLID = CType(Nothing, Long)
				End If
				Me.SendPropertyChanged("LIB_PRICE_LIST")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.DayTotals")>  _
Partial Public Class DayTotal
	
	Private _PLItemName As String
	
	Private _LIBItems As System.Nullable(Of Integer)
	
	Private _LIBLine As System.Nullable(Of Integer)
	
	Private _LIBCash As Decimal
	
	Private _ORAUpdate As System.Nullable(Of Boolean)
	
	Private _LibLocation As String
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PLItemName", DbType:="NVarChar(50)")>  _
	Public Property PLItemName() As String
		Get
			Return Me._PLItemName
		End Get
		Set
			If (String.Equals(Me._PLItemName, value) = false) Then
				Me._PLItemName = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LIBItems", DbType:="Int")>  _
	Public Property LIBItems() As System.Nullable(Of Integer)
		Get
			Return Me._LIBItems
		End Get
		Set
			If (Me._LIBItems.Equals(value) = false) Then
				Me._LIBItems = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LIBLine", DbType:="Int")>  _
	Public Property LIBLine() As System.Nullable(Of Integer)
		Get
			Return Me._LIBLine
		End Get
		Set
			If (Me._LIBLine.Equals(value) = false) Then
				Me._LIBLine = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LIBCash", DbType:="Money NOT NULL")>  _
	Public Property LIBCash() As Decimal
		Get
			Return Me._LIBCash
		End Get
		Set
			If ((Me._LIBCash = value)  _
						= false) Then
				Me._LIBCash = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ORAUpdate", DbType:="Bit")>  _
	Public Property ORAUpdate() As System.Nullable(Of Boolean)
		Get
			Return Me._ORAUpdate
		End Get
		Set
			If (Me._ORAUpdate.Equals(value) = false) Then
				Me._ORAUpdate = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LibLocation", DbType:="NVarChar(25)")>  _
	Public Property LibLocation() As String
		Get
			Return Me._LibLocation
		End Get
		Set
			If (String.Equals(Me._LibLocation, value) = false) Then
				Me._LibLocation = value
			End If
		End Set
	End Property
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.LIB_PRICE_LIST")>  _
Partial Public Class LIB_PRICE_LIST
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _LIBPLID As Long
	
	Private _PLItemName As String
	
	Private _PLPrice As System.Nullable(Of Decimal)
	
	Private _PLLine As String
	
	Private _PriceNotSet As System.Nullable(Of Boolean)
	
	Private _LIB_TRANSACTIONs As EntitySet(Of LIB_TRANSACTION)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnLIBPLIDChanging(value As Long)
    End Sub
    Partial Private Sub OnLIBPLIDChanged()
    End Sub
    Partial Private Sub OnPLItemNameChanging(value As String)
    End Sub
    Partial Private Sub OnPLItemNameChanged()
    End Sub
    Partial Private Sub OnPLPriceChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OnPLPriceChanged()
    End Sub
    Partial Private Sub OnPLLineChanging(value As String)
    End Sub
    Partial Private Sub OnPLLineChanged()
    End Sub
    Partial Private Sub OnPriceNotSetChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnPriceNotSetChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._LIB_TRANSACTIONs = New EntitySet(Of LIB_TRANSACTION)(AddressOf Me.attach_LIB_TRANSACTIONs, AddressOf Me.detach_LIB_TRANSACTIONs)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LIBPLID", AutoSync:=AutoSync.OnInsert, DbType:="BigInt NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property LIBPLID() As Long
		Get
			Return Me._LIBPLID
		End Get
		Set
			If ((Me._LIBPLID = value)  _
						= false) Then
				Me.OnLIBPLIDChanging(value)
				Me.SendPropertyChanging
				Me._LIBPLID = value
				Me.SendPropertyChanged("LIBPLID")
				Me.OnLIBPLIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PLItemName", DbType:="NVarChar(50)")>  _
	Public Property PLItemName() As String
		Get
			Return Me._PLItemName
		End Get
		Set
			If (String.Equals(Me._PLItemName, value) = false) Then
				Me.OnPLItemNameChanging(value)
				Me.SendPropertyChanging
				Me._PLItemName = value
				Me.SendPropertyChanged("PLItemName")
				Me.OnPLItemNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PLPrice", DbType:="Decimal(18,2)")>  _
	Public Property PLPrice() As System.Nullable(Of Decimal)
		Get
			Return Me._PLPrice
		End Get
		Set
			If (Me._PLPrice.Equals(value) = false) Then
				Me.OnPLPriceChanging(value)
				Me.SendPropertyChanging
				Me._PLPrice = value
				Me.SendPropertyChanged("PLPrice")
				Me.OnPLPriceChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PLLine", DbType:="NChar(10)")>  _
	Public Property PLLine() As String
		Get
			Return Me._PLLine
		End Get
		Set
			If (String.Equals(Me._PLLine, value) = false) Then
				Me.OnPLLineChanging(value)
				Me.SendPropertyChanging
				Me._PLLine = value
				Me.SendPropertyChanged("PLLine")
				Me.OnPLLineChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PriceNotSet", DbType:="Bit")>  _
	Public Property PriceNotSet() As System.Nullable(Of Boolean)
		Get
			Return Me._PriceNotSet
		End Get
		Set
			If (Me._PriceNotSet.Equals(value) = false) Then
				Me.OnPriceNotSetChanging(value)
				Me.SendPropertyChanging
				Me._PriceNotSet = value
				Me.SendPropertyChanged("PriceNotSet")
				Me.OnPriceNotSetChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="LIB_PRICE_LIST_LIB_TRANSACTION", Storage:="_LIB_TRANSACTIONs", ThisKey:="LIBPLID", OtherKey:="LIBPLID")>  _
	Public Property LIB_TRANSACTIONs() As EntitySet(Of LIB_TRANSACTION)
		Get
			Return Me._LIB_TRANSACTIONs
		End Get
		Set
			Me._LIB_TRANSACTIONs.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_LIB_TRANSACTIONs(ByVal entity As LIB_TRANSACTION)
		Me.SendPropertyChanging
		entity.LIB_PRICE_LIST = Me
	End Sub
	
	Private Sub detach_LIB_TRANSACTIONs(ByVal entity As LIB_TRANSACTION)
		Me.SendPropertyChanging
		entity.LIB_PRICE_LIST = Nothing
	End Sub
End Class
